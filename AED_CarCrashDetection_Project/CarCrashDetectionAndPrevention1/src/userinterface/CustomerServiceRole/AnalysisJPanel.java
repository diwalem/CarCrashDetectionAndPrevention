/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerServiceRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.EnterpriseDirectory;
import Business.Organization.CustomerServiceOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HospitalToCustomerServiceWorkRequest;
import Business.WorkQueue.PoliceToCustomerServiceWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Mrunalini
 */
public class AnalysisJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private CustomerServiceOrganization customerServiceOrganization;
    private Enterprise enterprise;
    

    private EnterpriseDirectory enterpriseDirectory;

    /**
     * Creates new form AnalysisJPanel
     */
    public AnalysisJPanel(JPanel userProcessContainer, Organization customerServiceOrganization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.customerServiceOrganization = (CustomerServiceOrganization) customerServiceOrganization;
        this.enterprise = enterprise;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnVireReasonsReport = new javax.swing.JButton();
        btnSendToPolice1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnViewPriorityButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnVireReasonsReport.setText("View Reasons Report");
        btnVireReasonsReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVireReasonsReportActionPerformed(evt);
            }
        });
        add(btnVireReasonsReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, 159, -1));

        btnSendToPolice1.setText("View Location pie chart");
        btnSendToPolice1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendToPolice1ActionPerformed(evt);
            }
        });
        add(btnSendToPolice1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, 159, -1));

        jButton1.setText("View life saved pie chart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 240, 159, -1));

        btnViewPriorityButton.setText("View priority report");
        btnViewPriorityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPriorityButtonActionPerformed(evt);
            }
        });
        add(btnViewPriorityButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 300, 159, -1));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 412, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnVireReasonsReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVireReasonsReportActionPerformed
        // TODO add your handling code here:
        int dcount = 0;
        int discount = 0;
        int speedcount = 0;
        int recklesscount = 0;
        int environmentcount = 0;
        int faultycount = 0;
        int disobeycount = 0;
        int badroadcount = 0;
        int collisioncount = 0;
        int precount = 0;
        int othercount = 0;
        for (WorkRequest wr : customerServiceOrganization.getWorkQueue().getWorkRequestList()) {

            if (wr instanceof PoliceToCustomerServiceWorkRequest) {

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Drunk Driving")) {

                    dcount++;

                }

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Distracted driving")) {
                    discount++;

                }

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Speeding")) {
                    speedcount++;

                }

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Reckless Driving")) {
                    recklesscount++;

                }

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Environmental factors")) {
                    environmentcount++;

                }

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Faulty vehicle")) {
                    faultycount++;

                }

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Disobeying traffic rules")) {
                    disobeycount++;

                }

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Bad road conditions")) {
                    badroadcount++;

                }

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Collision")) {
                    collisioncount++;

                }

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Pre-existing health condition")) {
                    precount++;

                }

                if (((PoliceToCustomerServiceWorkRequest) wr).getReason().equals("Others")) {
                    othercount++;

                }

            }

        }
        int totalcount;
        totalcount = dcount + discount + speedcount + recklesscount + environmentcount + faultycount + disobeycount + badroadcount + collisioncount + precount + othercount;

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(dcount, "Reason", "Drunk Driving");
        dataset.setValue(discount, "Reason", "Distracted Driving");
        dataset.setValue(speedcount, "Reason", "Speeding");
        dataset.setValue(recklesscount, "Reason", "Reckless Driving");
        dataset.setValue(environmentcount, "Reason", "Environmental Factors");
        dataset.setValue(faultycount, "Reason", "Faulty Vehicle");
        dataset.setValue(disobeycount, "Reason", "Disobeying traffic rules");
        dataset.setValue(badroadcount, "Reason", "Bad road conditions");
        dataset.setValue(collisioncount, "Reason", "Collision");
        dataset.setValue(precount, "Reason", "Pre existing health conditions");
        dataset.setValue(othercount, "Reason", "Others");
        JFreeChart chart = ChartFactory.createBarChart("PoliceReport", "reason", "ReasonCount", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.PINK);
        ChartFrame frame = new ChartFrame("Bar Chart For Reasons of Maximum Accidents", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
    }//GEN-LAST:event_btnVireReasonsReportActionPerformed

    private void btnSendToPolice1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendToPolice1ActionPerformed
        // TODO add your handling code here:

        int countMiami = 0;
        int countBoston = 0;
        int countSeattle = 0;
        int countLosAngeles = 0;
        int countIllinois = 0;
        int temp = 0;

        for (WorkRequest req1 : customerServiceOrganization.getWorkQueue().getWorkRequestList()) {
            if ((req1 instanceof HospitalToCustomerServiceWorkRequest || req1 instanceof PoliceToCustomerServiceWorkRequest)) {
                System.out.println("");
            } else {
                if (req1.getLocation().equals("Miami")) {
                    countMiami++;
                }
                if (req1.getLocation().equals("Boston")) {
                    countBoston++;
                }
                if (req1.getLocation().equals("Seattle")) {
                    countSeattle++;
                }
                if (req1.getLocation().equals("LosAngeles")) {
                    countLosAngeles++;
                }
                if (req1.getLocation().equals("Illinois")) {
                    countIllinois++;
                }
            }
        }
        System.out.println("Temp: " + temp);
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        pieDataset.setValue("Miami", new Integer(countMiami));
        pieDataset.setValue("Boston", new Integer(countBoston));
        pieDataset.setValue("Seattle", new Integer(countSeattle));
        pieDataset.setValue("LosAngeles", new Integer(countLosAngeles));
        pieDataset.setValue("Illinois", new Integer(countIllinois));

        JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pieDataset, true, true, true);
        PiePlot P = (PiePlot) chart.getPlot();
        ChartFrame frame = new ChartFrame("Pie Chart", chart);
        frame.setVisible(true);
        frame.setSize(450, 500);
    }//GEN-LAST:event_btnSendToPolice1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int countLifeSavedYes = 0;
        int countLifeSavedNo = 0;

        int custSerOrgSize = customerServiceOrganization.getWorkQueue().getWorkRequestList().size();
        System.out.println("CustServOrg size: " + custSerOrgSize);
        for (WorkRequest req2 : customerServiceOrganization.getWorkQueue().getWorkRequestList()) {
            if(req2 instanceof HospitalToCustomerServiceWorkRequest) {

                String lifeSaved = ((HospitalToCustomerServiceWorkRequest) req2).getLifeSaved();
                if (lifeSaved.equalsIgnoreCase("Yes")) {
                    countLifeSavedYes++;
                } else {
                    countLifeSavedNo++;
                }
            }

        }

        DefaultPieDataset pieDataset = new DefaultPieDataset();
        pieDataset.setValue("Yes", new Integer(countLifeSavedYes));
        pieDataset.setValue("No", new Integer(countLifeSavedNo));

        JFreeChart chart = ChartFactory.createPieChart("Pie Chart", pieDataset, true, true, true);
        PiePlot P = (PiePlot) chart.getPlot();
        ChartFrame frame = new ChartFrame("Pie Chart", chart);
        frame.setVisible(true);
        frame.setSize(450, 500);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnViewPriorityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPriorityButtonActionPerformed
        // TODO add your handling code here:
        int countPriorityOne = 0;
        int countPriorityTwo = 0;
        int countPriorityThree = 0;
        int countPriorityFour = 0;
        int countPriorityFive = 0;
        long tempFirstPriorityRT=0l;
        long tempSecondPriorityRT=0l;
        long tempThirdPriorityRT=0l;
        long tempFourthPriorityRT=0l;
        long tempFifthPriorityRT=0l;
        long avgFirstPriorityRT=0l;
        long avgSecondPriorityRT=0l;
        long avgThirdPriorityRT=0l;
        long avgFourthPriorityRT=0l;
        long avgFifthPriorityRT=0l;
        int temp = 0;

        for (WorkRequest req3 : customerServiceOrganization.getWorkQueue().getWorkRequestList()) {

            if (req3 instanceof HospitalToCustomerServiceWorkRequest) // {
                {
                    System.out.println("Priprity : "+req3.getPriority());
                    System.out.println("status : "+req3.getStatus());
                    System.out.println("Time : "+req3.getResolveDate());
                    System.out.println(" Req Time : "+req3.getRequestDate());
                    if (req3.getPriority() != null && req3.getResolveDate() != null && req3.getStatus().equalsIgnoreCase("Processed")){
                        if (req3.getPriority().equals("1")) {
                            long  responseTime = req3.getResolveDate().getTime() - req3.getRequestDate().getTime();
                            tempFirstPriorityRT=tempFirstPriorityRT+responseTime;
                            countPriorityOne++;
                        }
                        else if (req3.getPriority().equals("2")) {
                            long  responseTime = req3.getResolveDate().getTime() - req3.getRequestDate().getTime();
                            tempSecondPriorityRT=tempSecondPriorityRT+responseTime;
                            countPriorityTwo++;
                        }
                        else if (req3.getPriority().equals("3")) {
                            long  responseTime = req3.getResolveDate().getTime() - req3.getRequestDate().getTime();
                            tempThirdPriorityRT=tempThirdPriorityRT+responseTime;
                            countPriorityThree++;
                        }
                        else if (req3.getPriority().equals("4")) {
                            long  responseTime = req3.getResolveDate().getTime() - req3.getRequestDate().getTime();
                            tempFourthPriorityRT=tempFourthPriorityRT+responseTime;
                            countPriorityFour++;
                        }
                        else if (req3.getPriority().equals("5")) {
                            long  responseTime = req3.getResolveDate().getTime() - req3.getRequestDate().getTime();
                            tempFifthPriorityRT=tempFifthPriorityRT+responseTime;
                            countPriorityFive++;
                        }
                    }
                }

            }
            if(countPriorityOne!=0)
            {
                avgFirstPriorityRT=tempFirstPriorityRT/countPriorityOne;
            }
            if(countPriorityTwo!=0)
            {
                avgSecondPriorityRT=tempSecondPriorityRT/countPriorityTwo;
            }
            if (countPriorityThree !=0)
            {
                avgThirdPriorityRT=tempThirdPriorityRT/countPriorityThree;
            }
            if (countPriorityFour !=0)
            {
                avgFourthPriorityRT=tempFourthPriorityRT/countPriorityFour;
            }
            if (countPriorityFive !=0)
            {
                avgFifthPriorityRT=tempFifthPriorityRT/countPriorityFive;
            }

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.setValue(avgFirstPriorityRT, "Priority", "1");
            dataset.setValue(avgSecondPriorityRT, "Priority", "2");
            dataset.setValue(avgThirdPriorityRT, "Priority","3");
            dataset.setValue(avgFourthPriorityRT, "Priority","4");
            dataset.setValue(avgFifthPriorityRT, "Priority","5");

            JFreeChart chart = ChartFactory.createBarChart("Hospital Response Time Report", "Priority", "Average Response Time", dataset, PlotOrientation.VERTICAL, false, true, false);
            CategoryPlot p = chart.getCategoryPlot();
            p.setRangeGridlinePaint(Color.PINK);
            ChartFrame frame = new ChartFrame("Bar Chart For average response time of hospital", chart);
            frame.setVisible(true);
            frame.setSize(450, 350);

    }//GEN-LAST:event_btnViewPriorityButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnSendToPolice1;
    private javax.swing.JButton btnViewPriorityButton;
    private javax.swing.JButton btnVireReasonsReport;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
