/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HospitalHelpDeskRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.CustomerServiceOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.HospitalHelpDeskOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HospitalToCustomerServiceWorkRequest;
import Business.WorkQueue.PoliceToCustomerServiceWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mrunalini
 */
public class HospitalHelpDeskWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private HospitalHelpDeskOrganization hospitalHelpDeskOrganization;
    private Organization organization;
    private Enterprise enterprise;
    EcoSystem ecoSystem;

    /**
     * Creates new form HospitalHelpDeskWorkAreaJPanel
     *
     */
    public HospitalHelpDeskWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, Organization hospitalHelpDeskOrganization, EcoSystem business, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.ecoSystem = business;
        this.enterprise = enterprise;
        this.hospitalHelpDeskOrganization = (HospitalHelpDeskOrganization) hospitalHelpDeskOrganization;

        populateTable(false);
        valueLabel.setText(enterprise.getName());

    }

    public void populateTable(boolean forwardToDoc) {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : hospitalHelpDeskOrganization.getWorkQueue().getWorkRequestList()) {
            if (request instanceof HospitalToCustomerServiceWorkRequest) {
                continue;
            } else if (request instanceof PoliceToCustomerServiceWorkRequest) {
                continue;
            } else {

                Object[] row = new Object[7];
                row[0] = request;
                row[1] = request.getPriority();
                row[2] = request.getPatientName();
                row[3] = request.getSender();
                row[4] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[5] = request.getStatus();
                row[6] = request.getRequestDate();
                model.addRow(row);
                if (forwardToDoc) {
                    WorkRequest request2 = new WorkRequest();
                    request2.setLocation(request.getLocation());
                    request2.setPriority(request.getPriority());
                    request2.setPatientName(request.getPatientName());
                    request2.setSender(userAccount);
                    request2.setStatus("Assigned");

                    Organization org = null;
                    for (Network network : ecoSystem.getNetworkList()) {

                        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                            if (enterprise.getLocation().equals(request.getLocation())) {
                                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                    if (organization instanceof DoctorOrganization) {
                                        org = organization;
                                        break;
                                    }
                                }

                            }

                        }
                    }
                    if (org != null) {
                        org.getWorkQueue().getWorkRequestList().add(request2);
                        userAccount.getWorkQueue().getWorkRequestList().add(request2);
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        assignJButton = new javax.swing.JButton();
        btnSendAmbulance = new javax.swing.JButton();
        btnCheckDoctor = new javax.swing.JButton();
        btnSendtoSL = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Location", "Priority Level", "Patient Name", "Sender", "Receiver", "Status", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 103, 651, 234));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 35, 127, 30));

        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(351, 40, 158, 26));

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 370, 111, -1));

        btnSendAmbulance.setText("Send Ambulance");
        btnSendAmbulance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendAmbulanceActionPerformed(evt);
            }
        });
        add(btnSendAmbulance, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 423, -1, -1));

        btnCheckDoctor.setText("Check Doctor Availibility");
        btnCheckDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckDoctorActionPerformed(evt);
            }
        });
        add(btnCheckDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(522, 370, -1, -1));

        btnSendtoSL.setText("Send to Save Lives");
        btnSendtoSL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendtoSLActionPerformed(evt);
            }
        });
        add(btnSendtoSL, new org.netbeans.lib.awtextra.AbsoluteConstraints(522, 423, 147, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        JOptionPane.showMessageDialog(null, "You are now handling this case.", "Message To You.", JOptionPane.INFORMATION_MESSAGE);

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Processing");
        populateTable(true);
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void btnCheckDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckDoctorActionPerformed
        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(row, 0);
        if (request.getStatus().equals("Received")) {
            JOptionPane.showMessageDialog(null, "Please assign the request to yourself before checking the availibility of the doctor.", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            DoctorAvailibilityJPanel doctorAvailibilityJPanel = new DoctorAvailibilityJPanel(userProcessContainer, userAccount, ecoSystem, enterprise, request);

            userProcessContainer.add("doctorAvailibilityJPanel", doctorAvailibilityJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_btnCheckDoctorActionPerformed

    private void btnSendtoSLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendtoSLActionPerformed
        // TODO add your handling code here:

        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(row, 0);

        if (request.getStatus().equals("Received")) {
            JOptionPane.showMessageDialog(null, "Please assign the request to yourself before sending to the hospital.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (request.getStatus().equals("Processing")) {
            JOptionPane.showMessageDialog(null, "Please send this request to any available doctor.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Sent to Save Lives.", "Information", JOptionPane.INFORMATION_MESSAGE);
            request.setStatus("Completed");

            int size1 = hospitalHelpDeskOrganization.getWorkQueue().getWorkRequestList().size();

            if (hospitalHelpDeskOrganization.getWorkQueue().getWorkRequestList() != null && !hospitalHelpDeskOrganization.getWorkQueue().getWorkRequestList().isEmpty()) {

                WorkRequest request1 = hospitalHelpDeskOrganization.getWorkQueue().getWorkRequestList().get(size1 - 1);

                if (request1 instanceof HospitalToCustomerServiceWorkRequest) {
                    HospitalToCustomerServiceWorkRequest wr2 = new HospitalToCustomerServiceWorkRequest();
                    wr2.setPatientName(request1.getPatientName());
                    wr2.setLocation(request1.getLocation());
                    wr2.setLifeSaved(((HospitalToCustomerServiceWorkRequest) request1).getLifeSaved());
                    wr2.setCondition(((HospitalToCustomerServiceWorkRequest) request1).getCondition());
                    wr2.setInjuryDescription(((HospitalToCustomerServiceWorkRequest) request1).getInjuryDescription());

                    Date respondTime = new Date();

                    long diffInTime = respondTime.getTime() - request1.getRequestDate().getTime();
                    System.out.println("Response time by hospital: " + diffInTime + "ms");
                          wr2.setResolveDate(respondTime);
                        wr2.setRequestDate(request.getRequestDate());
                        wr2.setPriority(request.getPriority());
                        System.out.println("Req.priority"+request.getPriority());
                        System.out.println("Req1.priority"+request1.getPriority());
                        wr2.setStatus("Processed");

                    Organization org = null;
                    for (Network network : ecoSystem.getNetworkList()) {

                        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                if (organization instanceof CustomerServiceOrganization) {
                                    org = organization;
                                    break;
                                }
                            }
                        }
                    }
                    if (org != null) {
                        org.getWorkQueue().getWorkRequestList().add(wr2);

                    }

                }


    }//GEN-LAST:event_btnSendtoSLActionPerformed
        }
    }
    private void btnSendAmbulanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendAmbulanceActionPerformed

        int row = workRequestJTable.getSelectedRow();
         if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(row, 0);
        if (request.getStatus().equals("Received")) {
            JOptionPane.showMessageDialog(null, "Please assign the request to yourself before sending the ambulance", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else {
            JOptionPane.showMessageDialog(null, "Ambulance Sent.", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSendAmbulanceActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton btnCheckDoctor;
    private javax.swing.JButton btnSendAmbulance;
    private javax.swing.JButton btnSendtoSL;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
