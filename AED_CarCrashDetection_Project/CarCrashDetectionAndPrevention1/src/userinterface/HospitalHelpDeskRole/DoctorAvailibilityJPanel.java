/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HospitalHelpDeskRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.HospitalHelpDeskOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Smruthi
 */
public class DoctorAvailibilityJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private HospitalHelpDeskOrganization hospitalHelpDeskOrganization;
    private Organization organization;
    private Enterprise enterprise;
    EcoSystem ecoSystem;
    WorkRequest req;

    /**
     * Creates new form DoctorAvailibilityJPanel
     */
    DoctorAvailibilityJPanel(JPanel userProcessContainer, UserAccount userAccount, EcoSystem ecoSystem, Enterprise enterprise, WorkRequest req) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.ecoSystem = ecoSystem;
        this.enterprise = enterprise;
        this.req = req;

        populateTable();
                valueLabel.setText(enterprise.getName());


    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblDoctorAvail.getModel();

        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {

            if (organization instanceof DoctorOrganization) {

                for (Employee e : organization.getEmployeeDirectory().getEmployeeList()) {

                    Object[] row = new Object[3];
                    row[0] = e;
                    row[1] = e.getId();
                    row[2] = e.getAvailability();

                    model.addRow(row);
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        btnRequestTest = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctorAvail = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 120, 30));

        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 130, -1));

        btnRequestTest.setText("Send To Doctor");
        btnRequestTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestTestActionPerformed(evt);
            }
        });
        add(btnRequestTest, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 290, -1, -1));

        tblDoctorAvail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor Name", "Doctor ID", "Availibility"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDoctorAvail);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, -1, 140));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 30, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnRequestTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestTestActionPerformed
        // TODO add your handling code here:
        req.setStatus("Processed");
        int row = tblDoctorAvail.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Employee emp = (Employee) tblDoctorAvail.getValueAt(row, 0);
        String dname = emp.getName();
        if (emp.getAvailability().equalsIgnoreCase("Yes")) {
            JOptionPane.showMessageDialog(null, "Sent to this doctor.", "Information", JOptionPane.INFORMATION_MESSAGE);

            for (Network network : ecoSystem.getNetworkList()) {

                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {

                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {

                        for (UserAccount account : organization.getUserAccountDirectory().getUserAccountList()) {

                            if (account.getEmployee().getName().equals(dname)) {

                                int size = organization.getWorkQueue().getWorkRequestList().size();

                                if (organization.getWorkQueue().getWorkRequestList() != null && !organization.getWorkQueue().getWorkRequestList().isEmpty()) {
                                    WorkRequest request1 = organization.getWorkQueue().getWorkRequestList().get(size - 1);

                                    account.getEmployee().setAvailability("No");
                                    account.getWorkQueue().getWorkRequestList().add(request1);
                                    break;

                                }

                            }
                        }
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "This doctor is busy handling a different case. Please assign this case to any available doctor.", "Warning", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_btnRequestTestActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRequestTest;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable tblDoctorAvail;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
